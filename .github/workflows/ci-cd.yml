name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Unit tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, e2e]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment file
        run: |
          cat > .env.local << EOF
          VITE_SUPABASE_URL=https://test.supabase.co
          VITE_SUPABASE_ANON_KEY=test-key
          VITE_APP_VERSION=test
          VITE_APP_ENVIRONMENT=test
          EOF

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: maintainpro-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker container startup
        run: |
          # Start container in background
          docker run -d --name test-container -p 3000:3000 maintainpro-test:latest

          # Wait for container to be ready
          timeout=30
          while [ $timeout -gt 0 ]; do
            if docker exec test-container curl -f http://localhost:3000/ > /dev/null 2>&1; then
              echo "✅ Container is healthy and responding"
              break
            fi
            echo "Waiting for container to be ready..."
            sleep 2
            timeout=$((timeout-2))
          done

          if [ $timeout -eq 0 ]; then
            echo "❌ Container failed to start properly"
            docker logs test-container
            exit 1
          fi

          # Test health check
          docker exec test-container curl -f http://localhost:3000/ || exit 1

          # Clean up
          docker stop test-container
          docker rm test-container

  railway-deployment-test:
    name: Railway Deployment Test
    runs-on: ubuntu-latest
    needs: docker-build-test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Create production-like environment file
        run: |
          cat > .env.local << EOF
          VITE_SUPABASE_URL=${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}
          VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY || 'test-key' }}
          VITE_APP_VERSION=${{ github.sha }}
          VITE_APP_ENVIRONMENT=staging
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Railway-like deployment
        run: |
          # Simulate Railway deployment environment
          docker run -d --name railway-test \
            -p 3000:3000 \
            -e PORT=3000 \
            -e NODE_ENV=production \
            -e RAILWAY_ENVIRONMENT=production \
            ${{ steps.meta.outputs.tags }}

          # Wait for deployment to be ready (similar to Railway health check)
          timeout=60
          while [ $timeout -gt 0 ]; do
            if curl -f http://localhost:3000/ > /dev/null 2>&1; then
              echo "✅ Railway-like deployment successful"
              break
            fi
            echo "Waiting for deployment to be ready..."
            sleep 3
            timeout=$((timeout-3))
          done

          if [ $timeout -eq 0 ]; then
            echo "❌ Railway-like deployment failed"
            docker logs railway-test
            exit 1
          fi

          # Test health check endpoint
          curl -f http://localhost:3000/ || exit 1

          # Test that app serves static assets
          curl -f http://localhost:3000/assets/ || echo "Static assets endpoint not available (expected)"

          # Clean up
          docker stop railway-test
          docker rm railway-test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, e2e, docker-build-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: dist/

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Docker security scan
        uses: docker/scout-action@v1
        if: github.event_name == 'pull_request'
        with:
          command: cves
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          only-severities: critical,high
          exit-code: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security, railway-deployment-test]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: dist/

      - name: Deploy to Staging Railway
        run: |
          echo "Deploying to staging environment..."
          # Install Railway CLI
          npm install -g @railway/cli

          # Deploy to staging Railway project
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up --service staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  staging-health-check:
    name: Staging Health Check
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Wait for staging deployment
        run: sleep 30

      - name: Health check staging deployment
        run: |
          # Replace with your actual staging URL
          STAGING_URL="${{ vars.STAGING_URL || 'https://your-staging-url.railway.app' }}"

          # Test health check
          for i in {1..10}; do
            if curl -f "$STAGING_URL" > /dev/null 2>&1; then
              echo "✅ Staging deployment is healthy"
              exit 0
            fi
            echo "Attempt $i: Waiting for staging to be ready..."
            sleep 10
          done

          echo "❌ Staging deployment health check failed"
          exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: dist/

      - name: Deploy to Production Railway
        run: |
          echo "Deploying to production environment..."
          # Install Railway CLI
          npm install -g @railway/cli

          # Deploy to production Railway project
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up --service production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  production-health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for production deployment
        run: sleep 45

      - name: Health check production deployment
        run: |
          # Replace with your actual production URL
          PRODUCTION_URL="${{ vars.PRODUCTION_URL || 'https://your-production-url.railway.app' }}"

          # Test health check
          for i in {1..15}; do
            if curl -f "$PRODUCTION_URL" > /dev/null 2>&1; then
              echo "✅ Production deployment is healthy"
              exit 0
            fi
            echo "Attempt $i: Waiting for production to be ready..."
            sleep 10
          done

          echo "❌ Production deployment health check failed"
          exit 1

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: staging-health-check
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          if [ -n "$LHCI_GITHUB_APP_TOKEN" ]; then
            lhci autorun
          else
            echo "⚠️ LHCI_GITHUB_APP_TOKEN not configured, skipping Lighthouse CI"
          fi
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || '' }}

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [production-health-check]
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: Notify deployment success
        run: |
          echo "✅ Production deployment successful!"
          # Add your notification logic here (Slack, Discord, etc.)

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs:
      [
        test,
        e2e,
        docker-build-test,
        railway-deployment-test,
        build,
        security,
        deploy-staging,
        deploy-production,
        staging-health-check,
        production-health-check,
      ]
    if: failure()

    steps:
      - name: Notify deployment failure
        run: |
          echo "❌ Deployment pipeline failed!"
          # Add your notification logic here (Slack, Discord, etc.)
